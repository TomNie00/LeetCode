import collections
from collections import deque


class Solution(object):
    def findMinHeightTrees(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: List[int]
        """

        # Time limit
        # num_dict = collections.defaultdict(list)
        #
        # for start, target in edges:
        #     num_dict[start].append(target)
        #     num_dict[target].append(start)
        #
        # q = deque()
        # visted = []
        # min_root = []
        # last_min_level = None
        #
        # for i in num_dict.keys():
        #     q.append(i)
        #     level = 0
        #     visted.clear()
        #     while q:
        #         size = len(q)
        #         while size:
        #             size -= 1
        #             curr = q.popleft()
        #             for edge in (num_dict[curr]):
        #                 # check every edge about this num
        #                 if edge not in visted:
        #                     # if not visted append it and add the new num to the q
        #                     visted.append(edge)
        #                     q.append(edge)
        #         level += 1
        #
        #     if min_root:
        #         if last_min_level > level:
        #             min_root.clear()
        #             min_root.append(i)
        #             last_min_level = level
        #         elif last_min_level == level:
        #             min_root.append(i)
        #     else:
        #         last_min_level = level
        #         min_root.append(i)
        #
        # return min_root

        if n == 1: return [0]

        num_dict = collections.defaultdict(list)
        q = collections.deque()
        for start, target in edges:
            num_dict[start].append(target)
            num_dict[target].append(start)

        for start, targets in num_dict.items():
            if len(targets) == 1:
                q.append(start)

        while n > 2:
            length = len(q)
            n -= length
            for i in range(length):
                curr_node = q.popleft()
                for node in num_dict[curr_node]:
                    # from the curr_node list to find the node that need to delete connection of this curr_node
                    num_dict[node].remove(curr_node)
                    if len(num_dict[node]) == 1:
                        q.append(node)

        return list(q)


if __name__ == '__main__':
    obj = Solution()

    # n = 4
    # edges = [[1,0],[1,2],[1,3]]
    # print(obj.findMinHeightTrees(n, edges))
    #
    # n = 6
    # edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]
    # print(obj.findMinHeightTrees(n, edges))

    n = 420
    edges = [[0, 1], [1, 2], [0, 3], [0, 4], [3, 5], [4, 6], [0, 7], [4, 8], [1, 9], [6, 10], [3, 11], [0, 12], [5, 13],
             [8, 14], [5, 15], [7, 16], [4, 17], [0, 18], [15, 19], [8, 20], [11, 21], [16, 22], [0, 23], [13, 24],
             [12, 25], [3, 26], [21, 27], [1, 28], [17, 29], [3, 30], [29, 31], [15, 32], [1, 33], [0, 34], [34, 35],
             [19, 36], [23, 37], [4, 38], [15, 39], [16, 40], [35, 41], [27, 42], [40, 43], [35, 44], [3, 45], [30, 46],
             [33, 47], [16, 48], [36, 49], [42, 50], [31, 51], [25, 52], [6, 53], [52, 54], [33, 55], [17, 56],
             [45, 57], [19, 58], [9, 59], [37, 60], [42, 61], [36, 62], [28, 63], [1, 64], [1, 65], [60, 66], [26, 67],
             [23, 68], [45, 69], [27, 70], [2, 71], [7, 72], [63, 73], [37, 74], [15, 75], [36, 76], [12, 77], [48, 78],
             [71, 79], [53, 80], [23, 81], [5, 82], [15, 83], [33, 84], [61, 85], [9, 86], [54, 87], [1, 88], [77, 89],
             [76, 90], [8, 91], [27, 92], [71, 93], [87, 94], [71, 95], [66, 96], [90, 97], [25, 98], [41, 99],
             [31, 100], [31, 101], [30, 102], [19, 103], [46, 104], [51, 105], [42, 106], [66, 107], [97, 108],
             [107, 109], [106, 110], [46, 111], [5, 112], [58, 113], [40, 114], [106, 115], [103, 116], [116, 117],
             [22, 118], [57, 119], [10, 120], [98, 121], [34, 122], [11, 123], [89, 124], [120, 125], [114, 126],
             [75, 127], [126, 128], [33, 129], [40, 130], [125, 131], [96, 132], [46, 133], [130, 134], [64, 135],
             [22, 136], [47, 137], [61, 138], [105, 139], [44, 140], [106, 141], [83, 142], [121, 143], [68, 144],
             [118, 145], [139, 146], [68, 147], [84, 148], [63, 149], [1, 150], [140, 151], [40, 152], [95, 153],
             [10, 154], [144, 155], [66, 156], [39, 157], [71, 158], [64, 159], [94, 160], [133, 161], [66, 162],
             [6, 163], [65, 164], [89, 165], [156, 166], [156, 167], [126, 168], [82, 169], [58, 170], [115, 171],
             [80, 172], [65, 173], [63, 174], [38, 175], [168, 176], [30, 177], [34, 178], [2, 179], [22, 180],
             [57, 181], [93, 182], [122, 183], [38, 184], [113, 185], [59, 186], [112, 187], [2, 188], [72, 189],
             [140, 190], [99, 191], [15, 192], [180, 193], [176, 194], [52, 195], [18, 196], [135, 197], [26, 198],
             [182, 199], [160, 200], [64, 201], [76, 202], [71, 203], [137, 204], [125, 205], [161, 206], [206, 207],
             [50, 208], [171, 209], [98, 210], [193, 211], [162, 212], [207, 213], [63, 214], [138, 215], [129, 216],
             [205, 217], [60, 218], [218, 219], [189, 220], [167, 221], [168, 222], [188, 223], [81, 224], [209, 225],
             [117, 226], [216, 227], [79, 228], [195, 229], [127, 230], [143, 231], [153, 232], [69, 233], [110, 234],
             [126, 235], [136, 236], [184, 237], [156, 238], [226, 239], [233, 240], [3, 241], [1, 242], [140, 243],
             [129, 244], [189, 245], [186, 246], [77, 247], [245, 248], [111, 249], [156, 250], [133, 251], [135, 252],
             [198, 253], [165, 254], [98, 255], [191, 256], [119, 257], [37, 258], [202, 259], [8, 260], [69, 261],
             [31, 262], [171, 263], [100, 264], [174, 265], [216, 266], [58, 267], [255, 268], [21, 269], [108, 270],
             [211, 271], [31, 272], [259, 273], [20, 274], [241, 275], [38, 276], [230, 277], [115, 278], [195, 279],
             [245, 280], [177, 281], [183, 282], [275, 283], [85, 284], [52, 285], [236, 286], [76, 287], [218, 288],
             [283, 289], [259, 290], [46, 291], [193, 292], [213, 293], [164, 294], [97, 295], [46, 296], [94, 297],
             [151, 298], [216, 299], [68, 300], [298, 301], [118, 302], [273, 303], [249, 304], [279, 305], [274, 306],
             [277, 307], [65, 308], [71, 309], [206, 310], [219, 311], [14, 312], [225, 313], [225, 314], [94, 315],
             [141, 316], [174, 317], [216, 318], [129, 319], [266, 320], [139, 321], [223, 322], [317, 323], [283, 324],
             [137, 325], [168, 326], [319, 327], [3, 328], [101, 329], [24, 330], [323, 331], [241, 332], [115, 333],
             [158, 334], [229, 335], [203, 336], [192, 337], [291, 338], [186, 339], [206, 340], [211, 341], [324, 342],
             [18, 343], [196, 344], [62, 345], [97, 346], [93, 347], [293, 348], [13, 349], [274, 350], [292, 351],
             [154, 352], [27, 353], [61, 354], [259, 355], [129, 356], [292, 357], [17, 358], [341, 359], [166, 360],
             [209, 361], [301, 362], [248, 363], [232, 364], [49, 365], [188, 366], [61, 367], [56, 368], [34, 369],
             [359, 370], [345, 371], [125, 372], [225, 373], [222, 374], [362, 375], [2, 376], [86, 377], [46, 378],
             [135, 379], [124, 380], [8, 381], [279, 382], [181, 383], [193, 384], [351, 385], [280, 386], [344, 387],
             [331, 388], [146, 389], [74, 390], [67, 391], [132, 392], [48, 393], [234, 394], [281, 395], [96, 396],
             [217, 397], [13, 398], [286, 399], [197, 400], [255, 401], [319, 402], [175, 403], [203, 404], [115, 405],
             [63, 406], [177, 407], [53, 408], [383, 409], [115, 410], [348, 411], [274, 412], [251, 413], [77, 414],
             [159, 415], [209, 416], [148, 417], [84, 418], [129, 419]]
    print(obj.findMinHeightTrees(n, edges))

    n = 606
    edges = [[0, 1], [0, 2], [1, 3], [3, 4], [0, 5], [3, 6], [2, 7], [2, 8], [5, 9], [0, 10], [3, 11], [3, 12], [3, 13],
             [7, 14], [4, 15], [8, 16], [3, 17], [10, 18], [0, 19], [19, 20], [18, 21], [12, 22], [11, 23], [0, 24],
             [16, 25], [5, 26], [21, 27], [2, 28], [16, 29], [7, 30], [14, 31], [21, 32], [16, 33], [5, 34], [3, 35],
             [32, 36], [6, 37], [5, 38], [9, 39], [12, 40], [13, 41], [29, 42], [22, 43], [26, 44], [22, 45], [1, 46],
             [43, 47], [38, 48], [20, 49], [12, 50], [36, 51], [16, 52], [24, 53], [45, 54], [27, 55], [20, 56],
             [39, 57], [49, 58], [33, 59], [43, 60], [46, 61], [7, 62], [55, 63], [35, 64], [42, 65], [5, 66], [29, 67],
             [66, 68], [19, 69], [60, 70], [43, 71], [36, 72], [37, 73], [56, 74], [73, 75], [19, 76], [3, 77],
             [41, 78], [12, 79], [24, 80], [50, 81], [76, 82], [71, 83], [13, 84], [20, 85], [59, 86], [80, 87],
             [37, 88], [64, 89], [2, 90], [81, 91], [20, 92], [55, 93], [0, 94], [27, 95], [29, 96], [50, 97], [76, 98],
             [80, 99], [22, 100], [12, 101], [91, 102], [90, 103], [43, 104], [79, 105], [20, 106], [13, 107],
             [58, 108], [16, 109], [103, 110], [4, 111], [87, 112], [84, 113], [51, 114], [111, 115], [96, 116],
             [1, 117], [73, 118], [61, 119], [24, 120], [50, 121], [16, 122], [52, 123], [54, 124], [84, 125], [2, 126],
             [120, 127], [109, 128], [2, 129], [6, 130], [130, 131], [2, 132], [47, 133], [60, 134], [112, 135],
             [118, 136], [76, 137], [70, 138], [84, 139], [135, 140], [55, 141], [87, 142], [9, 143], [6, 144],
             [78, 145], [110, 146], [113, 147], [2, 148], [55, 149], [103, 150], [16, 151], [0, 152], [141, 153],
             [89, 154], [141, 155], [31, 156], [26, 157], [46, 158], [49, 159], [111, 160], [150, 161], [40, 162],
             [133, 163], [67, 164], [77, 165], [59, 166], [81, 167], [104, 168], [53, 169], [96, 170], [169, 171],
             [49, 172], [26, 173], [110, 174], [73, 175], [41, 176], [77, 177], [40, 178], [109, 179], [120, 180],
             [49, 181], [83, 182], [19, 183], [25, 184], [25, 185], [73, 186], [8, 187], [4, 188], [56, 189],
             [178, 190], [51, 191], [28, 192], [43, 193], [19, 194], [108, 195], [106, 196], [75, 197], [126, 198],
             [10, 199], [94, 200], [81, 201], [113, 202], [151, 203], [186, 204], [145, 205], [110, 206], [27, 207],
             [21, 208], [161, 209], [131, 210], [17, 211], [76, 212], [130, 213], [44, 214], [127, 215], [48, 216],
             [190, 217], [8, 218], [69, 219], [189, 220], [177, 221], [148, 222], [158, 223], [124, 224], [27, 225],
             [205, 226], [28, 227], [65, 228], [111, 229], [189, 230], [143, 231], [27, 232], [160, 233], [226, 234],
             [7, 235], [52, 236], [93, 237], [103, 238], [107, 239], [189, 240], [56, 241], [43, 242], [81, 243],
             [127, 244], [127, 245], [22, 246], [246, 247], [233, 248], [68, 249], [89, 250], [66, 251], [138, 252],
             [49, 253], [246, 254], [141, 255], [23, 256], [34, 257], [197, 258], [114, 259], [249, 260], [71, 261],
             [199, 262], [34, 263], [92, 264], [198, 265], [241, 266], [148, 267], [161, 268], [55, 269], [122, 270],
             [25, 271], [5, 272], [4, 273], [27, 274], [209, 275], [193, 276], [51, 277], [111, 278], [54, 279],
             [278, 280], [49, 281], [92, 282], [107, 283], [135, 284], [134, 285], [225, 286], [138, 287], [98, 288],
             [35, 289], [280, 290], [29, 291], [174, 292], [83, 293], [16, 294], [52, 295], [116, 296], [213, 297],
             [255, 298], [23, 299], [143, 300], [108, 301], [285, 302], [150, 303], [82, 304], [44, 305], [224, 306],
             [265, 307], [6, 308], [157, 309], [149, 310], [125, 311], [262, 312], [38, 313], [169, 314], [240, 315],
             [151, 316], [50, 317], [114, 318], [237, 319], [208, 320], [160, 321], [130, 322], [190, 323], [315, 324],
             [179, 325], [33, 326], [34, 327], [239, 328], [58, 329], [193, 330], [192, 331], [219, 332], [11, 333],
             [150, 334], [84, 335], [103, 336], [187, 337], [67, 338], [238, 339], [49, 340], [288, 341], [264, 342],
             [43, 343], [34, 344], [226, 345], [23, 346], [90, 347], [12, 348], [273, 349], [236, 350], [192, 351],
             [321, 352], [33, 353], [74, 354], [203, 355], [90, 356], [205, 357], [244, 358], [318, 359], [194, 360],
             [202, 361], [180, 362], [358, 363], [9, 364], [178, 365], [318, 366], [171, 367], [137, 368], [101, 369],
             [369, 370], [110, 371], [328, 372], [186, 373], [35, 374], [33, 375], [296, 376], [57, 377], [277, 378],
             [190, 379], [332, 380], [180, 381], [215, 382], [174, 383], [9, 384], [159, 385], [275, 386], [96, 387],
             [198, 388], [387, 389], [257, 390], [361, 391], [16, 392], [246, 393], [306, 394], [175, 395], [29, 396],
             [377, 397], [271, 398], [2, 399], [235, 400], [336, 401], [112, 402], [221, 403], [278, 404], [82, 405],
             [263, 406], [401, 407], [227, 408], [1, 409], [116, 410], [139, 411], [1, 412], [103, 413], [304, 414],
             [240, 415], [411, 416], [412, 417], [408, 418], [361, 419], [170, 420], [65, 421], [165, 422], [212, 423],
             [53, 424], [184, 425], [370, 426], [289, 427], [299, 428], [141, 429], [237, 430], [205, 431], [2, 432],
             [239, 433], [173, 434], [358, 435], [174, 436], [323, 437], [130, 438], [1, 439], [176, 440], [169, 441],
             [256, 442], [146, 443], [109, 444], [284, 445], [130, 446], [430, 447], [43, 448], [159, 449], [193, 450],
             [138, 451], [136, 452], [248, 453], [60, 454], [213, 455], [54, 456], [239, 457], [315, 458], [396, 459],
             [179, 460], [413, 461], [413, 462], [456, 463], [273, 464], [26, 465], [89, 466], [393, 467], [249, 468],
             [397, 469], [86, 470], [316, 471], [138, 472], [152, 473], [377, 474], [376, 475], [113, 476], [426, 477],
             [413, 478], [303, 479], [13, 480], [470, 481], [82, 482], [116, 483], [110, 484], [211, 485], [96, 486],
             [316, 487], [407, 488], [113, 489], [385, 490], [327, 491], [280, 492], [109, 493], [177, 494], [79, 495],
             [332, 496], [485, 497], [270, 498], [184, 499], [104, 500], [12, 501], [187, 502], [166, 503], [374, 504],
             [56, 505], [333, 506], [169, 507], [134, 508], [79, 509], [453, 510], [256, 511], [198, 512], [389, 513],
             [125, 514], [219, 515], [181, 516], [254, 517], [163, 518], [13, 519], [290, 520], [39, 521], [87, 522],
             [136, 523], [124, 524], [121, 525], [277, 526], [418, 527], [120, 528], [33, 529], [67, 530], [28, 531],
             [337, 532], [177, 533], [381, 534], [38, 535], [343, 536], [348, 537], [9, 538], [533, 539], [342, 540],
             [343, 541], [141, 542], [11, 543], [538, 544], [200, 545], [47, 546], [439, 547], [201, 548], [526, 549],
             [479, 550], [79, 551], [85, 552], [141, 553], [58, 554], [413, 555], [437, 556], [32, 557], [310, 558],
             [258, 559], [248, 560], [40, 561], [331, 562], [439, 563], [209, 564], [108, 565], [493, 566], [95, 567],
             [377, 568], [114, 569], [199, 570], [97, 571], [418, 572], [345, 573], [573, 574], [395, 575], [492, 576],
             [524, 577], [232, 578], [499, 579], [290, 580], [232, 581], [315, 582], [437, 583], [364, 584], [240, 585],
             [175, 586], [297, 587], [473, 588], [164, 589], [472, 590], [461, 591], [32, 592], [480, 593], [212, 594],
             [208, 595], [176, 596], [553, 597], [19, 598], [0, 599], [185, 600], [438, 601], [244, 602], [516, 603],
             [469, 604], [171, 605]]
    print(obj.findMinHeightTrees(n, edges))
